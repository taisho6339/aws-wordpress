AWSTemplateFormatVersion: '2010-09-09'

Mappings:
  dev:
    SystemProperties:
      Name: wordpress-sample
    WebInstanceProperties:
      Port: 80
      KeyName: wordpress-key-pair
      InstanceType: t2.micro
      AmiImageId: ami-0ff21806645c5e492
      AvailabilityZoneA: ap-northeast-1a
      AvailabilityZoneB: ap-northeast-1c
    DBProperties:
      Port: 3306
      MasterUserName: wordpress
      Engine: aurora-mysql
      EngineVersionName: 5.7.mysql_aurora.2.04.6
      EngineFamily: aurora-mysql5.7
      DatabaseName: wordpress
      InstanceType: db.t2.small
      BackupRetentionPeriod: 1
      PreferredBackupWindow: 03:00-03:30
      ClusterPreferredMaintenanceWindow: tue:03:30-tue:04:00
      InstancePreferredMaintenanceWindow: wed:03:30-wed:04:00
      AvailabilityZoneA: ap-northeast-1a
      AvailabilityZoneB: ap-northeast-1c

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
  Password:
    Type: String
    Default: password
    NoEcho: true

Resources:
  WordpressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "vpc"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "igw"]]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WordpressVPC
      InternetGatewayId: !Ref InternetGateway
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, WebInstanceProperties, AvailabilityZoneA]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "public-web", "subnetA"]]
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, WebInstanceProperties, AvailabilityZoneB]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "public-web", "subnetB"]]
  WebRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "rtb"]]
  WebRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WebRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  WebSubnetAAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref WebRouteTable
  WebSubnetBAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref WebRouteTable
  WebELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "sg"]]
      GroupDescription: sg for elb
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          ToPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "sg"]]
  WebInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "sg"]]
      GroupDescription: sg for web instances
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          ToPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          SourceSecurityGroupId: !Ref WebELBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "sg"]]
  WebELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb"]]
      SecurityGroups:
        - !Ref WebELBSG
      Subnets:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb"]]
  WebELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "tg"]]
      VpcId: !Ref WordpressVPC
      Port: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Matcher:
        HttpCode: 200
      TargetType: instance
  WebELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Protocol: HTTP
      LoadBalancerArn: !Ref WebELB
      DefaultActions:
        - TargetGroupArn: !Ref WebELBTargetGroup
          Type: forward
  AutoScalingGroupConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [!Ref Env, WebInstanceProperties, AmiImageId]
      SecurityGroups:
        - !Ref WebInstanceSG
      InstanceType: !FindInMap [!Ref Env, WebInstanceProperties, InstanceType]
      KeyName: !FindInMap [!Ref Env, WebInstanceProperties, KeyName]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "asg"]]
      MinSize: 2
      MaxSize: 3
      LaunchConfigurationName: !Ref AutoScalingGroupConf
      VPCZoneIdentifier:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      TargetGroupARNs:
        - !Ref WebELBTargetGroup
  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, DBProperties, AvailabilityZoneA]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "private-db", "subnetA"]]
  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, DBProperties, AvailabilityZoneB]
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "private-db", "subnetB"]]
  DBInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db", "sg"]]
      GroupDescription: sg for db instances
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [!Ref Env, DBProperties, Port]
          ToPort: !FindInMap [!Ref Env, DBProperties, Port]
          SourceSecurityGroupId: !Ref WebInstanceSG
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db", "sg"]]
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db", "subnet", "group"]]
      DBSubnetGroupDescription: subnet group for rds in wordpress.
      SubnetIds:
        - !Ref DBSubnetA
        - !Ref DBSubnetB
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db", "subnet", "group"]]
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: ParameterGroup for cluster.
      Family: !FindInMap [!Ref Env, DBProperties, EngineFamily]
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        character_set_filesystem: utf8mb4
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db-cluster-parameters"]]
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: ParameterGroup for each instance.
      Family: !FindInMap [!Ref Env, DBProperties, EngineFamily]
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db-instance-parameters"]]
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db-cluster"]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DatabaseName: !FindInMap [!Ref Env, DBProperties, DatabaseName]
      MasterUsername: !FindInMap [!Ref Env, DBProperties, MasterUserName]
      MasterUserPassword: !Ref Password
      Engine: !FindInMap [!Ref Env, DBProperties, Engine]
      EngineVersion: !FindInMap [!Ref Env, DBProperties, EngineVersionName]
      EngineMode: provisioned
      BackupRetentionPeriod: !FindInMap [!Ref Env, DBProperties, BackupRetentionPeriod]
      PreferredBackupWindow: !FindInMap [!Ref Env, DBProperties, PreferredBackupWindow]
      PreferredMaintenanceWindow: !FindInMap [!Ref Env, DBProperties, ClusterPreferredMaintenanceWindow]
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBInstanceSG
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db-cluster"]]
  DBMasterInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !FindInMap [!Ref Env, DBProperties, Engine]
      EngineVersion: !FindInMap [!Ref Env, DBProperties, EngineVersionName]
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !FindInMap [!Ref Env, DBProperties, InstanceType]
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "db-master"]]






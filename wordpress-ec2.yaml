AWSTemplateFormatVersion: '2010-09-09'

Mappings:
  dev:
    SystemProperties:
      Name: wordpress-sample
    WebInstanceProperties:
      Port: 80
      KeyName: wordpress-key-pair
      InstanceType: t2.micro
      AmiImageId: ami-0ff21806645c5e492
      AvailabilityZoneA: ap-northeast-1a
      AvailabilityZoneB: ap-northeast-1c

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev

Resources:
  WordpressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "vpc"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "igw"]]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WordpressVPC
      InternetGatewayId: !Ref InternetGateway
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, WebInstanceProperties, AvailabilityZoneA]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "subnetA"]]
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [!Ref Env, WebInstanceProperties, AvailabilityZoneB]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "subnetB"]]
  WebRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "rtb"]]
  WebRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WebRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  WebSubnetAAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref WebRouteTable
  WebSubnetBAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref WebRouteTable
  WebELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "sg"]]
      GroupDescription: sg for elb
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          ToPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "sg"]]
  WebInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "sg"]]
      GroupDescription: sg for web instances
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          ToPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
          SourceSecurityGroupId: !Ref WebELBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "web", "sg"]]
  WebELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb"]]
      SecurityGroups:
        - !Ref WebELBSG
      Subnets:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb"]]
  WebELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "elb", "tg"]]
      VpcId: !Ref WordpressVPC
      Port: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPort: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Matcher:
        HttpCode: 200
      TargetType: instance
  WebELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: !FindInMap [!Ref Env, WebInstanceProperties, Port]
      Protocol: HTTP
      LoadBalancerArn: !Ref WebELB
      DefaultActions:
        - TargetGroupArn: !Ref WebELBTargetGroup
          Type: forward
  AutoScalingGroupConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [!Ref Env, WebInstanceProperties, AmiImageId]
      SecurityGroups:
        - !Ref WebInstanceSG
      InstanceType: !FindInMap [!Ref Env, WebInstanceProperties, InstanceType]
      KeyName: !FindInMap [!Ref Env, WebInstanceProperties, KeyName]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name wordpress-web -d -p 80:80 wordpress
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ["-", [!FindInMap [!Ref Env, SystemProperties, Name], "asg"]]
      MinSize: 2
      MaxSize: 3
      LaunchConfigurationName: !Ref AutoScalingGroupConf
      VPCZoneIdentifier:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      TargetGroupARNs:
        - !Ref WebELBTargetGroup





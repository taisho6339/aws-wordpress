AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SystemName:
    Type: String
    Default: wordpress-sample
  SystemListenPort:
    Type: Number
    Default: 80
  InstanceKeyName:
    Type: String
    Default: wordpress-key-pair
  InstanceType:
    Type: String
    Default: t2.micro
  AmiImageId:
    Type: String
    Default: ami-0ff21806645c5e492
  AvailabilityZoneA:
    Type: String
    Default: ap-northeast-1a
  AvailabilityZoneB:
    Type: String
    Default: ap-northeast-1c

Resources:
  WordpressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "vpc"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "igw"]]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WordpressVPC
      InternetGatewayId: !Ref InternetGateway
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "web", "subnetA"]]
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "web", "subnetB"]]
  WebRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref WordpressVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "web", "rtb"]]
  WebRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WebRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  WebSubnetAAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref WebRouteTable
  WebSubnetBAssociateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref WebRouteTable
  WebELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref SystemName, "elb", "sg"]]
      GroupDescription: sg for elb
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SystemListenPort
          ToPort: !Ref SystemListenPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "elb", "sg"]]
  WebInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref SystemName, "web", "sg"]]
      GroupDescription: sg for web instances
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SystemListenPort
          ToPort: !Ref SystemListenPort
          SourceSecurityGroupId: !Ref WebELBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "web", "sg"]]
  WebELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref SystemName, "elb"]]
      SecurityGroups:
        - !Ref WebELBSG
      Subnets:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, "elb"]]
  WebELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref SystemName, "elb", "tg"]]
      VpcId: !Ref WordpressVPC
      Port: !Ref SystemListenPort
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPort: !Ref SystemListenPort
      Matcher:
        HttpCode: 200
      TargetType: instance
  WebELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: !Ref SystemListenPort
      Protocol: HTTP
      LoadBalancerArn: !Ref WebELB
      DefaultActions:
        - TargetGroupArn: !Ref WebELBTargetGroup
          Type: forward
  AutoScalingGroupConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiImageId
      SecurityGroups:
        - !Ref WebInstanceSG
      InstanceType: !Ref InstanceType
      KeyName: !Ref InstanceKeyName
      UserData:
        Fn::Base64: |
          yum -y update
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name wordpress-web -d -p 80:80 wordpress
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ["-", [!Ref SystemName, "asg"]]
      MinSize: 1
      MaxSize: 3
      LaunchConfigurationName: !Ref AutoScalingGroupConf
      VPCZoneIdentifier:
        - !Ref WebSubnetA
        - !Ref WebSubnetB
      TargetGroupARNs:
        - !Ref WebELBTargetGroup




